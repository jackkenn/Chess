package game;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import bots.AI;
import bots.UltraInstictStockFish;
import game.Board.Cord;
import game.Board.Spot;
import game.pieces.Piece;

public class GameLoop {

	private Board board;
	private Scanner scan = new Scanner(System.in);
	private String input = new String();
	private ArrayList<String> inputList = new ArrayList<String>();
	private boolean runlast = true;
	private boolean record = false;
	private BufferedWriter moveList;
	private GameWindow window;
	public UltraInstictStockFish white;
	public UltraInstictStockFish black;
	public static String movesIN = new String();
	public boolean nextTurn = false;
	private int numberOfMoves = 0;
	private Long delta;

	public GameLoop(boolean record, boolean rerun, String[] args) throws IOException { // args kinda pointless?
		int numberOfMoves = 0;
		this.board = new Board();
		this.runlast = rerun;
		this.record = record;
		this.window = new GameWindow(this.board, this);

		while (!this.board.white.mated && !this.board.black.mated && !this.board.white.staleMated
				&& !this.board.black.staleMated) {
			this.window.update();
			// if (nextTurn) {
			if (this.delta == null) {
				this.delta = System.currentTimeMillis();
			}

			if (this.movesIN.length() >= 5) {
				this.move(movesIN);
				this.movesIN = new String();
				this.window.unselectedAll();
				this.window.update();
			}
			if (this.board.white.turn) {
				this.white.move();
				System.out.println("Black's turn");
				this.numberOfMoves++;
			} else if (this.board.black.turn) {
				// this.black.move();
				// System.out.println("White's turn");
				// this.numberOfMoves++;
			}
			// nextTurn = false;
			// }
			if (this.numberOfMoves > 150) {
				System.out.println("Game has exceeded max turns");
				/*
				 * int whiteValue = 0; int blackValue = 0;
				 * 
				 * for(Piece p : this.white.self.pieces) { whiteValue += p.getValue(); }
				 * for(Piece p : this.black.self.pieces) { blackValue += p.getValue(); }
				 * if(whiteValue>blackValue) { (this.black).writeWeights(); } else {
				 * (this.white).writeWeights(); } break;
				 */
			}
		}
		if (this.board.white.mated) {
			System.out.println("White has been CheckMated");
			// (gameloop.white).writeWeights();
		} else if (this.board.white.staleMated) {
			System.out.println("White has been StaleMated");
		} else if (this.board.black.mated) {
			System.out.println("Black has been CheckMated");
			// (gameloop.black).writeWeights();
		} else if (this.board.black.staleMated) {
			System.out.println("Black has been StaleMated");
		}
		this.window.update();
		this.delta = (System.currentTimeMillis() - this.delta);
		System.out.println("Total time to run: " + (this.delta / 1000.0));
		System.out.println("Total number of moves: " + this.numberOfMoves);
		// this.window.setVisible(false);
	}

	public void gameInit() throws FileNotFoundException {
		if (this.runlast) { // repeat last game
			File f = new File("MoveList.txt");
			Scanner tscan = new Scanner(f);
			while (tscan.hasNextLine()) {
				try {
					String str = tscan.nextLine().toUpperCase();
					if (new String(str.copyValueOf(str.toCharArray(), 0, 5)).contentEquals("SEED:")) {
						Scanner seedScan = new Scanner(
								new String(str.copyValueOf(str.toCharArray(), 6, str.length() - 6)));
						Long Seed = seedScan.nextLong();
						this.white = new UltraInstictStockFish(this, true, Seed);
						this.black = new UltraInstictStockFish(this, false, Seed);

					} else {
						this.move(str);
						this.white.next();
						this.black.next();
						this.numberOfMoves++;
					}
				} catch (Exception e) {
					System.out.println(e.getStackTrace());
				}
			}
			tscan.close();
		} else {
			this.white = new UltraInstictStockFish(this, true, System.currentTimeMillis());
			this.black = new UltraInstictStockFish(this, false, System.currentTimeMillis());
		}
	}

	public Board getBoard() {
		return board;
	}

	private static void print(String s) {
		System.out.print(s);
	}

	private boolean move(String move) throws IOException {
		Scanner scan = new Scanner(move);
		Cord curCord = board.new Cord(scan.hasNext() ? scan.next() : "00");
		if (curCord.row < board.grid.size() - 1 && curCord.row > 0 && curCord.column < board.grid.get(0).size() - 1
				&& curCord.column > 0) {
			Spot curSpot = board.getSpot(curCord);
			Player player = curSpot.piece.getPlayer();
			if (player.turn) {
				Cord nextCord = board.new Cord(scan.hasNext() ? scan.next() : "00");
				if (nextCord.row < board.grid.size() - 1 && nextCord.row > 0
						&& nextCord.column < board.grid.get(0).size() - 1 && nextCord.column > 0) {
					Spot nextSpot = board.getSpot(nextCord);
					if (player.isLegalMove(curSpot, nextSpot)) {
						inputList.add(curCord.cord + " " + nextCord.cord);
						if (record) {
							moveList = new BufferedWriter(new FileWriter("MoveList.txt"));
							if (black != null) {
								moveList.write("SEED: " + black.getSeed() + "\n");
							}
							for (String s : inputList) {
								moveList.write(s + "\n");
							}
							moveList.close();
						}
						board.getPiece(curCord).move(nextSpot);
						player.endTurn();
						print(board.toString() + "\n");
						scan.close();
						return true;
					} else {
						print("Illegal Move\n");
						scan.close();
						return false;
					}
				} else {
					print("Invalid location\n");
					scan.close();
					return false;
				}
			} else {
				print("Invalid piece\n");
				scan.close();
				return false;
			}
		} else {
			print("Invalid location\n");
			scan.close();
			return false;
		}
	}

	public boolean move(Spot cur, Spot next) {
		Player player = board.getPiece(cur.cord).getPlayer();
		if (player.isLegalMove(board.getSpot(cur.cord), board.getSpot(next.cord))) {
			inputList.add(cur.cord + " " + next.cord);
			if (record) {
				try {
					moveList = new BufferedWriter(new FileWriter("MoveList.txt"));
					if (black != null) {
						moveList.write("SEED: " + black.getSeed() + "\n");
					}
					for (String s : inputList) {
						moveList.write(s + "\n");
					}
					moveList.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			board.getPiece(cur.cord).move(board.getSpot(next.cord));
			player.endTurn();
			print(board.toString() + "\n\n");
			return true;
		} else {
			print("Illegal Move\n");
			return false;
		}
	}

	public boolean move(Spot[] s) {
		if (s.length == 2) {
			return move(s[0], s[1]);
		}
		return false;
	}

	public static void main(String[] args) throws IOException {
		GameLoop game = new GameLoop(false, false, args);
	}
}
