package bots;

import game.Board;
import game.Board.Spot;
import game.GameLoop;
import game.Player;
import game.pieces.Piece;

public class UltraInstictStockFish extends AI {
	private int turn = 0;
	private Spot[] focus; //point of attack
	
	private final int pieceWeight; //Material value * this
	private final int spotWeight; //where it is
	private final int movesWeight; //where it can go
	private final int pinningWeight; //pinning
	private final int protectWeight; //protecting
	private final int attackingWeight; //can capture
	private final int attackedWeight; //can be captured
	private final int selfPreference; //our board value * this
	private final int checkWeight; //putting opp in check

	public UltraInstictStockFish(GameLoop game, boolean isWhite, Long seed) {
		super(game, isWhite, seed);
		// TODO Auto-generated constructor stub
	}

	@Override
	public boolean move() {
		// TODO Auto-generated method stub
		return false;
	}
	
	private int valueOfBoard(Player player) {
		int matValue = 0;
		int posValue = 0;
		for(Piece p : player.pieces) {
			if(p.getType()!=Board.PieceType.KING) {
				matValue += p.getValue();
			}
			for(Piece[] piece : p.pinning) {
				if(piece[0].getPlayer().equals(self.opponent)) {
					if(piece[0].getType()==Board.PieceType.KING) {
						posValue += checkWeight;
					}
					posValue += piece[0].getValue() * attackingWeight;
				} else {
					
				}
			}
			
		}
		return -1;
	}
	
	private int attacking(Piece piece) { //does not check legal moves
		int attackers = 0;
		int deffeners = 0;
		Piece aList[] = new Piece[piece.pinned.size()];
		Piece dList[] = new Piece[piece.pinned.size()];
		for(Piece[] p : piece.pinned) {
			if(p[0].getPlayer().equals(piece.getPlayer().opponent)) {
		}
		return -1;
	}

}
