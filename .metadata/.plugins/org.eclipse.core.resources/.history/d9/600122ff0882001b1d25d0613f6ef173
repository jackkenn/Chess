package game;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import game.Board.PieceType;
import game.Board.Spot;

import bots.UltraInstictStockFish;

public class GameWindow extends javax.swing.JFrame implements WindowListener {
	public Board board;
	public WindowSpot windowGrid[][] = new WindowSpot[8][8];
	public GameLoop gameLoop;
	private ArrayList<JButton> startButtons = new ArrayList<JButton>();
	private int width = 560;
	private int height = 580;

	public GameWindow(Board givenBoard, GameLoop givenGameLoop) {
		super("Chess");
		gameLoop = givenGameLoop;
		board = givenGameLoop.getBoard();
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setSize(width, height);
		this.setLocationRelativeTo(null);
		Image icon = new javax.swing.ImageIcon("graphics/board.png").getImage();
		this.setIconImage(icon);
		this.setResizable(false);
		this.setLayout(null);
		this.setVisible(true);
	}

	public void init() {
		startButtons.add(new JButton("Start"));
		startButtons.get(startButtons.size() - 1).addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				for (JButton b : startButtons) {
					b.setVisible(false);
				}
				genGrid(gameLoop.black != null);
				gameLoop.start = true;
				gameLoop.gameInit();
			}
		});

		startButtons.add(new JButton("Add Black AI"));
		startButtons.get(startButtons.size() - 1).addActionListener(new ActionListener() {
			private boolean toggleFlag;
			private int index = startButtons.size() - 1;

			@Override
			public void actionPerformed(ActionEvent e) {
				if (toggleFlag) {
					startButtons.get(index).setText("Add Black AI");
					gameLoop.black = null;
					toggleFlag = !toggleFlag;
				} else {
					startButtons.get(index).setText("Remove Black AI");
					gameLoop.black = new UltraInstictStockFish(gameLoop, false, System.currentTimeMillis());
					toggleFlag = !toggleFlag;
				}
			}
		});

		startButtons.add(new JButton("Add White AI"));
		startButtons.get(startButtons.size() - 1).addActionListener(new ActionListener() {
			private boolean toggleFlag;
			private int index = startButtons.size() - 1;

			@Override
			public void actionPerformed(ActionEvent e) {
				if (toggleFlag) {
					startButtons.get(index).setText("Add White AI");
					gameLoop.white = null;
					toggleFlag = !toggleFlag;
				} else {
					startButtons.get(index).setText("Remove White AI");
					gameLoop.white = new UltraInstictStockFish(gameLoop, true, System.currentTimeMillis());
					toggleFlag = !toggleFlag;
				}
			}
		});

		startButtons.add(new JButton("Record Game"));
		startButtons.get(startButtons.size() - 1).addActionListener(new ActionListener() {
			private boolean toggleFlag;
			private int index = startButtons.size() - 1;

			@Override
			public void actionPerformed(ActionEvent e) {
				if (toggleFlag) {
					startButtons.get(index).setText("Record Game");
					gameLoop.record = false;
					toggleFlag = !toggleFlag;
				} else {
					startButtons.get(index).setText("Don't Record Game");
					gameLoop.record = true;
					toggleFlag = !toggleFlag;
				}
			}
		});

		startButtons.add(new JButton("Load Game"));
		startButtons.get(startButtons.size() - 1).addActionListener(new ActionListener() {
			private boolean toggleFlag;
			private int index = startButtons.size() - 1;

			@Override
			public void actionPerformed(ActionEvent e) {
				if (toggleFlag) {
					startButtons.get(index).setText("Load Game");
					gameLoop.runlast = false;
					toggleFlag = !toggleFlag;
				} else {
					startButtons.get(index).setText("Don't Load Game");
					gameLoop.runlast = true;
					toggleFlag = !toggleFlag;
				}
			}
		});

		addStartButtons(new int[] { 30, 30 }, new int[] { 150, 60 });
	}

	private void addStartButtons(int gButtonPos[], int gButtonSize[]) {
		int buttonPos[] = gButtonPos;
		int buttonSize[] = gButtonSize;
		for (JButton b : startButtons) {
			b.setBounds(buttonPos[0], buttonPos[1], buttonSize[0], buttonSize[1]);
			if (buttonPos[0] + buttonSize[0] + 30 + 20 >= width) {
				buttonPos[0] = 30;
				buttonPos[1] += buttonSize[1] + 20;
			} else {
				buttonPos[0] += buttonSize[0] + 20;
			}
			this.add(b);
		}

	}

	private void genGrid(boolean isWhite) {
		if (isWhite) {
			boolean flag = true;
			for (int i = 0; i < 8; i++) {
				flag = !flag;
				for (int j = 0; j < 8; j++) {
					windowGrid[i][j] = new WindowSpot((i * 60) + 30, (j * 60) + 30, board.getSpot(8 - j, i + 1), this);
					this.add(windowGrid[i][j]);

					JPanel panel = (JPanel) this.getContentPane();
					JLabel label = new JLabel();
					label.setBounds((i * 60) + 30, (j * 60) + 30, 60, 60);
					if (flag) {
						label.setIcon(new ImageIcon("graphics/BlackTile.png"));
					} else {
						label.setIcon(new ImageIcon("graphics/WhiteTile.png"));
					}
					panel.add(label);
					label.setVisible(true);
					panel.setVisible(true);
					flag = !flag;
				}
			}
		} else {
			boolean flag = false;
			for (int i = 0; i < 8; i++) {
				flag = !flag;
				for (int j = 0; j < 8; j++) {
					windowGrid[i][j] = new WindowSpot((i * 60) + 30, (j * 60) + 30, board.getSpot(j + 1, i + 1), this);
					this.add(windowGrid[i][j]);

					JPanel panel = (JPanel) this.getContentPane();
					JLabel label = new JLabel();
					label.setBounds((i * 60) + 30, (j * 60) + 30, 60, 60);
					if (flag) {
						label.setIcon(new ImageIcon("graphics/BlackTile.png"));
					} else {
						label.setIcon(new ImageIcon("graphics/WhiteTile.png"));
					}
					panel.add(label);
					label.setVisible(true);
					panel.setVisible(true);
					flag = !flag;
				}
			}
		}

	}

	public void update() {
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				windowGrid[i][j].updateIcon();
			}
		}
	}

	public void unselectedAll() {
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				windowGrid[i][j].selected = false;
			}
		}
	}

	@Override
	public void windowOpened(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowClosing(WindowEvent e) {
		System.out.println("About to close the window");

	}

	@Override
	public void windowClosed(WindowEvent e) {
		System.out.println("The window has been closed");

	}

	@Override
	public void windowIconified(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowDeiconified(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowActivated(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowDeactivated(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	public class WindowSpot extends JButton {
		public Spot spot;
		private GameWindow window;
		public boolean selected = false;

		public WindowSpot(int givenX, int givenY, Spot givenSpot, GameWindow givenWindow) {
			this.setBounds(givenX, givenY, 60, 60);
			this.window = givenWindow;
			this.spot = givenSpot;
			this.setBorder(null);
			setContentAreaFilled(false);
			setBorderPainted(false);
			updateIcon();
			this.setVisible(false); // they show up right without this
			addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					clicked();
				}
			});
		}

		private void clicked() {
			System.out.println(spot.cord.toString());
			if (spot.piece.getPlayer().turn || selected) {
				if (GameLoop.movesIN.length() > 0) {
					GameLoop.movesIN += spot.cord.toString() + "\n";
				} else {
					GameLoop.movesIN = spot.cord.toString() + " ";
				}
				for (Spot s : spot.piece.possibleMoves) {
					for (int i = 0; i < 8; i++) {
						for (int j = 0; j < 8; j++) {
							if (window.windowGrid[i][j].spot.equals(s)) {
								window.windowGrid[i][j].selected = true;
							}
						}
					}
				}
			}
		}

		private void updateIcon() {
			this.setVisible(true);
			this.setContentAreaFilled(selected);
			if (spot.piece.getType() == PieceType.PAWN) {
				if (spot.piece.getPlayer().DIRECTION == 1) {
					this.setIcon(new ImageIcon("graphics/WhitePawn.png"));
				} else {
					this.setIcon(new ImageIcon("graphics/BlackPawn.png"));
				}
			} else if (spot.piece.getType() == PieceType.ROOK) {
				if (spot.piece.getPlayer().DIRECTION == 1) {
					this.setIcon(new ImageIcon("graphics/WhiteRook.png"));
				} else {
					this.setIcon(new ImageIcon("graphics/BlackRook.png"));
				}
			} else if (spot.piece.getType() == PieceType.KNIGHT) {
				if (spot.piece.getPlayer().DIRECTION == 1) {
					this.setIcon(new ImageIcon("graphics/WhiteKnight.png"));
				} else {
					this.setIcon(new ImageIcon("graphics/BlackKnight.png"));
				}
			} else if (spot.piece.getType() == PieceType.BISHOP) {
				if (spot.piece.getPlayer().DIRECTION == 1) {
					this.setIcon(new ImageIcon("graphics/WhiteBishop.png"));
				} else {
					this.setIcon(new ImageIcon("graphics/BlackBishop.png"));
				}
			} else if (spot.piece.getType() == PieceType.KING) {
				if (spot.piece.getPlayer().DIRECTION == 1) {
					this.setIcon(new ImageIcon("graphics/WhiteKing.png"));
				} else {
					this.setIcon(new ImageIcon("graphics/BlackKing.png"));
				}
			} else if (spot.piece.getType() == PieceType.QUEEN) {
				if (spot.piece.getPlayer().DIRECTION == 1) {
					this.setIcon(new ImageIcon("graphics/WhiteQueen.png"));
				} else {
					this.setIcon(new ImageIcon("graphics/BlackQueen.png"));
				}
			} else {
				this.setIcon(null);
			}
		}

	}

}
